#+TITLE: Unit and Integration Tests using Gradle

In this project, we play with unit test and integration test using Gradle.
* Setup ~build.gradle~
The ~java~ plugin already defined two source sets, namely ~main~ (production code that will be complied and assembled into a JAR file) and ~test~ (which will be executed merely). Different from unit tests, integration tests usually take longer time to perform, and thus it makes sense to introduce a new source set for integration test. 

We have the following goals:
- The source set should be configured such that IDEs like IntelliJ can identify these files as source code for testing.
- Unit and integration tests can be run separately
- A successful build should depend on pass of both unit test and integration test.
The provided ~build.gradle~ would suffice.

* Hierarchy of source files 
With the default Java source sets and the newly added integration test, the source files should follow this hierarchy
#+BEGIN_EXAMPLE
├── build.gradle
└── src
    ├── main
    │   ├── java
    │   │   └── hello
    │   │       └── Hello.java
    │   └── resources
    ├── test
    │   ├── java
    │   │   └── hello
    │   │       └── HelloUnitTest.java
    │   └── resources
    └── intest
        ├── java
        │   └── hello
        │       └── HelloIntegrationTest.java
        └── resources
#+END_EXAMPLE

The directories can be created via =mkdir -p src/{main,test,intest}/{java,resources}=

* Build and test
- A successful build depends both on unit test (~test~) and integration test (~intest~). 
- To run unit test separately: ~gradle test~
- To run integration test separately: ~gradle intest~
